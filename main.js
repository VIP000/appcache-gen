/*
 * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.
 *  
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 *  
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 * DEALINGS IN THE SOFTWARE.
 * 
 */
 
/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */
/*global define, $, brackets, window */

/** extension to generate a cache manifest according to a config file */
define(function (require, exports, module) {
    
    'use strict';


    var CommandManager      = brackets.getModule("command/CommandManager"),
        ProjectManager      = brackets.getModule("project/ProjectManager"),
        NativeFileSystem    = brackets.getModule("file/NativeFileSystem").NativeFileSystem,
        FileUtils           = brackets.getModule("file/FileUtils"),
        Menus               = brackets.getModule("command/Menus");


    var ERROR_MSG = "Error retreiving files";
    var MY_COMMAND_ID = "appcachr.appcachr";
    var MENU_NAME = "Create app cache";
    var TOP_COMMENT = "Generated by Brackets";
    var TOP_CONTENT = "NETWORK:\n*\n\nCACHE:\n\n";
    var MANIFEST_EXTENSION = "appcache";
    var CONFIG_FILE_PATH = "/config.json";
    
    var configData;

    var outputString = "";
    
    
    function loadConfig(filePath) {
        
        var fileEntry = new NativeFileSystem.FileEntry(filePath);
        
        FileUtils.readAsText(fileEntry)
            .done(function (text, readTimestamp) {
                try {
                    configData = JSON.parse(text);
                    console.log(configData);
                } catch (e) {
                    console.log("Can't parse config from " + filePath);
                }
            })
            .fail(function (error) {
                FileUtils.showFileOpenError(error.code, filePath);
            });
    }
    

    function getExtension(fileName) {
        
        var dotIndex = fileName.lastIndexOf(".");
        var fileExt = fileName.substr(dotIndex);
        return fileExt;
        
    }

    
    
    function isValidFile(pName) {
        
        var i;
        var exList = configData.exclusions;
        for (i = 0; i < exList.length; i++) {
            var ex = exList[i];
            
            if (pName === ex) {
                return false;
            } else if (ex.charAt(0) === "*") {
                if (getExtension(pName) === getExtension(ex)) {
                    return false;
                }
            }
            
        }
        
        return true;
    }
    

    
            
    function getContent(dir, prefix) {
        
        outputString += "\n";
        
        dir.createReader().readEntries(
            
            function (entries) {
                
                var entry,
                    entryI;
                
                for (entryI = 0; entryI < entries.length; entryI++) {
                    
                    entry = entries[entryI];
                    //console.log(entry);
                    
                    if (isValidFile(entry.name)) {
                         
                        if (entry.isDirectory) {
                            getContent(entry, prefix + entry.name + "/");
                        } else {
                            outputString += prefix + entry.name + "\n";
                        }
                    }
                    
                }
                
            },
            
            function (error) {
                window.alert(ERROR_MSG + error);
            }
        );
    }
    
    

    function handleAction() {
  
        //console.log("Creating app cache");
        
        var now = new Date();
        outputString = "CACHE MANIFEST\n\n# " + TOP_COMMENT + "\n# " + now + "\n\n" + TOP_CONTENT;
        
        var root = ProjectManager.getProjectRoot();
        
        getContent(root, "");
    
        console.log(outputString);

    }

    
    // Register the command and insert in the Edit menu
    CommandManager.register(MENU_NAME, MY_COMMAND_ID, handleAction);
    var menu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);
    menu.addMenuItem("menu-appcachr-appcachr", MY_COMMAND_ID);
    
    
    var moduleDir = FileUtils.getNativeModuleDirectoryPath(module);
    loadConfig(moduleDir + CONFIG_FILE_PATH);
    
});